module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "nodes": parse_nodes,
        "node": parse_node,
        "htmlNode": parse_htmlNode,
        "htmlBlockNode": parse_htmlBlockNode,
        "htmlSingleNode": parse_htmlSingleNode,
        "htmlCommentToken": parse_htmlCommentToken,
        "voidElement": parse_voidElement,
        "textNode": parse_textNode,
        "wordWithSlash": parse_wordWithSlash,
        "handlebarsNode": parse_handlebarsNode,
        "handlebarsBlockNode": parse_handlebarsBlockNode,
        "handlebarsIfBlock": parse_handlebarsIfBlock,
        "handlebarsEachBlock": parse_handlebarsEachBlock,
        "handlebarsUnlessBlock": parse_handlebarsUnlessBlock,
        "handlebarsPartialBlock": parse_handlebarsPartialBlock,
        "handlebarsGenericBlock": parse_handlebarsGenericBlock,
        "handlebarsElseBlock": parse_handlebarsElseBlock,
        "handlebarsSingleNode": parse_handlebarsSingleNode,
        "handlebarsSafeEvaluation": parse_handlebarsSafeEvaluation,
        "handlebarsUnSafeEvaluation": parse_handlebarsUnSafeEvaluation,
        "handlebarsLookup": parse_handlebarsLookup,
        "handlebarsSingleComment": parse_handlebarsSingleComment,
        "handlebarsSinglePartial": parse_handlebarsSinglePartial,
        "handlebarsSingleCommentToken": parse_handlebarsSingleCommentToken,
        "handlebarsSafeGenericSingle": parse_handlebarsSafeGenericSingle,
        "handlebarsUnSafeGenericSingle": parse_handlebarsUnSafeGenericSingle,
        "lookUpWords": parse_lookUpWords,
        "params": parse_params,
        "namedParams": parse_namedParams,
        "param": parse_param,
        "namedParam": parse_namedParam,
        "paramTokenSingleQuote": parse_paramTokenSingleQuote,
        "paramTokenDoubleQuote": parse_paramTokenDoubleQuote,
        "attributes": parse_attributes,
        "itemList": parse_itemList,
        "attributesSimple": parse_attributesSimple,
        "attributeSimple": parse_attributeSimple,
        "attributeSimpleKeyWrapper": parse_attributeSimpleKeyWrapper,
        "attributeSimpleKey": parse_attributeSimpleKey,
        "attributeSimpleValueWrapper": parse_attributeSimpleValueWrapper,
        "attributeSimpleValueWrapperSingleQuote": parse_attributeSimpleValueWrapperSingleQuote,
        "attributeSimpleValuesSingleQuote": parse_attributeSimpleValuesSingleQuote,
        "attributeSimpleValueSingleQuote": parse_attributeSimpleValueSingleQuote,
        "attributeSimpleValueWrapperDoubleQuote": parse_attributeSimpleValueWrapperDoubleQuote,
        "attributeSimpleValuesDoubleQuote": parse_attributeSimpleValuesDoubleQuote,
        "attributeSimpleValueDoubleQuote": parse_attributeSimpleValueDoubleQuote,
        "attributesHandlebars": parse_attributesHandlebars,
        "attributesHandlebarsBlock": parse_attributesHandlebarsBlock,
        "attributeHandlebarsBlock": parse_attributeHandlebarsBlock,
        "attributeHandlebarsBlockIF": parse_attributeHandlebarsBlockIF,
        "attributeHandlebarsBlockEACH": parse_attributeHandlebarsBlockEACH,
        "attributeHandelbarsBlockUNLESS": parse_attributeHandelbarsBlockUNLESS,
        "attributeHandlebarsBlockPARTIAL": parse_attributeHandlebarsBlockPARTIAL,
        "handlebarsIfElseBlock": parse_handlebarsIfElseBlock,
        "attributeHandlebarsBlockGENERIC": parse_attributeHandlebarsBlockGENERIC,
        "attributesHandlebarsSingle": parse_attributesHandlebarsSingle,
        "attributeHandlebarsSingleSAFE": parse_attributeHandlebarsSingleSAFE,
        "attributeHandlebarsSingleGENERICSAFE": parse_attributeHandlebarsSingleGENERICSAFE,
        "attributeHandlebarsSingleUNSAFE": parse_attributeHandlebarsSingleUNSAFE,
        "attributeHandlebarsSingleGENERICUNSAFE": parse_attributeHandlebarsSingleGENERICUNSAFE,
        "attributeHandlebarsSingleCOMMENT": parse_attributeHandlebarsSingleCOMMENT,
        "attributeHandlebarsSingleCOMMENTToken": parse_attributeHandlebarsSingleCOMMENTToken,
        "word": parse_word,
        "key": parse_key,
        "ignorable": parse_ignorable,
        "space": parse_space
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "nodes";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_nodes() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_node();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ignorable();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ignorable();
          }
          if (result1 !== null) {
            result2 = parse_nodes();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, n, ns) {
              return isArray(n) ? n.concat(ns) : [n].concat(ns) ;
            })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_node();
          if (result0 !== null) {
            result0 = (function(offset, n) {
                return [n];
              })(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_node() {
        var result0;
        
        result0 = parse_htmlNode();
        if (result0 === null) {
          result0 = parse_textNode();
          if (result0 === null) {
            result0 = parse_handlebarsNode();
          }
        }
        return result0;
      }
      
      function parse_htmlNode() {
        var result0;
        
        result0 = parse_htmlBlockNode();
        if (result0 === null) {
          result0 = parse_htmlSingleNode();
        }
        return result0;
      }
      
      function parse_htmlBlockNode() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignorable();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignorable();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 60) {
            result1 = "<";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<\"");
            }
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.substr(pos, 3) === "!--") {
              result2 = "!--";
              pos += 3;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"!--\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              pos2 = pos;
              reportFailures++;
              result3 = parse_voidElement();
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = pos2;
              }
              if (result3 !== null) {
                pos2 = pos;
                reportFailures++;
                if (input.substr(pos, 5) === "input") {
                  result4 = "input";
                  pos += 5;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"input\"");
                  }
                }
                reportFailures--;
                if (result4 === null) {
                  result4 = "";
                } else {
                  result4 = null;
                  pos = pos2;
                }
                if (result4 !== null) {
                  result5 = parse_word();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_ignorable();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_ignorable();
                    }
                    if (result6 !== null) {
                      result7 = parse_attributes();
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_ignorable();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_ignorable();
                        }
                        if (result8 !== null) {
                          if (input.charCodeAt(pos) === 62) {
                            result9 = ">";
                            pos++;
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\">\"");
                            }
                          }
                          if (result9 !== null) {
                            result10 = [];
                            result11 = parse_ignorable();
                            while (result11 !== null) {
                              result10.push(result11);
                              result11 = parse_ignorable();
                            }
                            if (result10 !== null) {
                              result11 = parse_nodes();
                              result11 = result11 !== null ? result11 : "";
                              if (result11 !== null) {
                                result12 = [];
                                result13 = parse_ignorable();
                                while (result13 !== null) {
                                  result12.push(result13);
                                  result13 = parse_ignorable();
                                }
                                if (result12 !== null) {
                                  if (input.substr(pos, 2) === "</") {
                                    result13 = "</";
                                    pos += 2;
                                  } else {
                                    result13 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"</\"");
                                    }
                                  }
                                  if (result13 !== null) {
                                    result14 = parse_word();
                                    if (result14 !== null) {
                                      if (input.charCodeAt(pos) === 62) {
                                        result15 = ">";
                                        pos++;
                                      } else {
                                        result15 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\">\"");
                                        }
                                      }
                                      if (result15 !== null) {
                                        result16 = [];
                                        result17 = parse_ignorable();
                                        while (result17 !== null) {
                                          result16.push(result17);
                                          result17 = parse_ignorable();
                                        }
                                        if (result16 !== null) {
                                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16];
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, openTagName, attrs, ns, closeTagName) {
              return {
                //@property {String} type Value 'htmlBlockNode'
                type: 'htmlBlockNode'
                //@property {String} openTag
              , openTag: openTagName
                //@property {String} closeTag
              , closeTag: closeTagName
                //@property {Array<AttributeASTNode>} attributes
              , attributes: attrs || []
                //@property {Array<NodeASTNode>} children
              , children: ns || []
              };
            })(pos0, result0[5], result0[7], result0[11], result0[14]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = [];
          result1 = parse_ignorable();
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ignorable();
          }
          if (result0 !== null) {
            if (input.substr(pos, 6) === "<input") {
              result1 = "<input";
              pos += 6;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"<input\"");
              }
            }
            if (result1 !== null) {
              result2 = [];
              result3 = parse_ignorable();
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_ignorable();
              }
              if (result2 !== null) {
                result3 = parse_attributes();
                result3 = result3 !== null ? result3 : "";
                if (result3 !== null) {
                  result4 = [];
                  result5 = parse_ignorable();
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_ignorable();
                  }
                  if (result4 !== null) {
                    if (input.charCodeAt(pos) === 62) {
                      result5 = ">";
                      pos++;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\">\"");
                      }
                    }
                    if (result5 !== null) {
                      pos2 = pos;
                      result6 = [];
                      result7 = parse_ignorable();
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_ignorable();
                      }
                      if (result6 !== null) {
                        result7 = parse_nodes();
                        result7 = result7 !== null ? result7 : "";
                        if (result7 !== null) {
                          result8 = [];
                          result9 = parse_ignorable();
                          while (result9 !== null) {
                            result8.push(result9);
                            result9 = parse_ignorable();
                          }
                          if (result8 !== null) {
                            if (input.substr(pos, 8) === "</input>") {
                              result9 = "</input>";
                              pos += 8;
                            } else {
                              result9 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"</input>\"");
                              }
                            }
                            if (result9 !== null) {
                              result6 = [result6, result7, result8, result9];
                            } else {
                              result6 = null;
                              pos = pos2;
                            }
                          } else {
                            result6 = null;
                            pos = pos2;
                          }
                        } else {
                          result6 = null;
                          pos = pos2;
                        }
                      } else {
                        result6 = null;
                        pos = pos2;
                      }
                      result6 = result6 !== null ? result6 : "";
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, attrs, f) {
                return {
                  type: 'htmlBlockNode'
                , openTag: 'input'
                , closeTag: 'input'
                , attributes: attrs || []
                , children: isArray(f[1]) ? f[1] :  []
                };
              })(pos0, result0[3], result0[6]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_htmlSingleNode() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignorable();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignorable();
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 60) {
            result1 = "<";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<\"");
            }
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.substr(pos, 3) === "!--") {
              result2 = "!--";
              pos += 3;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"!--\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = parse_voidElement();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_ignorable();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_ignorable();
                }
                if (result4 !== null) {
                  result5 = parse_attributes();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_ignorable();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_ignorable();
                    }
                    if (result6 !== null) {
                      if (input.charCodeAt(pos) === 47) {
                        result7 = "/";
                        pos++;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"/\"");
                        }
                      }
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        if (input.charCodeAt(pos) === 62) {
                          result8 = ">";
                          pos++;
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\">\"");
                          }
                        }
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, tagName, attrs) {
              return {
                //@property {String} type Possible values: 'htmlSingleNode', 'htmlComment'
                type: 'htmlSingleNode'
                //@property {String?} tag This attribute will be null in can the node is of type 'htmlComment'
              , tag: tagName
                //@property {Array<AttributeASTNode>} attributes
              , attributes: attrs || []
              };
            })(pos0, result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = [];
          result1 = parse_ignorable();
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_ignorable();
          }
          if (result0 !== null) {
            if (input.substr(pos, 6) === "<input") {
              result1 = "<input";
              pos += 6;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"<input\"");
              }
            }
            if (result1 !== null) {
              result2 = [];
              result3 = parse_space();
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_space();
              }
              if (result2 !== null) {
                result3 = parse_attributes();
                result3 = result3 !== null ? result3 : "";
                if (result3 !== null) {
                  result4 = [];
                  result5 = parse_space();
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_space();
                  }
                  if (result4 !== null) {
                    if (input.substr(pos, 2) === "/>") {
                      result5 = "/>";
                      pos += 2;
                    } else {
                      result5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"/>\"");
                      }
                    }
                    if (result5 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, attrs) {
                return {
                  type: 'htmlSingleNode'
                , tag: 'input'
                , attributes: attrs || []
                };
              })(pos0, result0[3]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = [];
            result1 = parse_ignorable();
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_ignorable();
            }
            if (result0 !== null) {
              if (input.substr(pos, 4) === "<!--") {
                result1 = "<!--";
                pos += 4;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"<!--\"");
                }
              }
              if (result1 !== null) {
                result2 = [];
                result3 = parse_htmlCommentToken();
                while (result3 !== null) {
                  result2.push(result3);
                  result3 = parse_htmlCommentToken();
                }
                if (result2 !== null) {
                  if (input.substr(pos, 3) === "-->") {
                    result3 = "-->";
                    pos += 3;
                  } else {
                    result3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"-->\"");
                    }
                  }
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, c) {
                  return {
                    type: 'htmlComment'
                    //@property {String?} value This property that contains the comment it self will be only present if the node is a comment
                  , value: c.join('')
                  };
                })(pos0, result0[2]);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_htmlCommentToken() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        if (input.substr(pos, 3) === "-->") {
          result0 = "-->";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-->\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          if (input.length > pos) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, c) {
              return c;
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_voidElement() {
        var result0;
        
        if (input.substr(pos, 4) === "area") {
          result0 = "area";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"area\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos, 4) === "base") {
            result0 = "base";
            pos += 4;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"base\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos, 8) === "basefont") {
              result0 = "basefont";
              pos += 8;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"basefont\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos, 2) === "br") {
                result0 = "br";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"br\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos, 3) === "col") {
                  result0 = "col";
                  pos += 3;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"col\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos, 7) === "command") {
                    result0 = "command";
                    pos += 7;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"command\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos, 5) === "embed") {
                      result0 = "embed";
                      pos += 5;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"embed\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos, 5) === "frame") {
                        result0 = "frame";
                        pos += 5;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"frame\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos, 2) === "hr") {
                          result0 = "hr";
                          pos += 2;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"hr\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos, 3) === "img") {
                            result0 = "img";
                            pos += 3;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"img\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos, 7) === "isindex") {
                              result0 = "isindex";
                              pos += 7;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"isindex\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos, 6) === "keygen") {
                                result0 = "keygen";
                                pos += 6;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"keygen\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos, 4) === "link") {
                                  result0 = "link";
                                  pos += 4;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"link\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos, 4) === "meta") {
                                    result0 = "meta";
                                    pos += 4;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"meta\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.substr(pos, 5) === "param") {
                                      result0 = "param";
                                      pos += 5;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"param\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos, 6) === "source") {
                                        result0 = "source";
                                        pos += 6;
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"source\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.substr(pos, 5) === "track") {
                                          result0 = "track";
                                          pos += 5;
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"track\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.substr(pos, 3) === "wbr") {
                                            result0 = "wbr";
                                            pos += 3;
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"wbr\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.substr(pos, 4) === "path") {
                                              result0 = "path";
                                              pos += 4;
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"path\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.substr(pos, 6) === "circle") {
                                                result0 = "circle";
                                                pos += 6;
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"circle\"");
                                                }
                                              }
                                              if (result0 === null) {
                                                if (input.substr(pos, 7) === "ellipse") {
                                                  result0 = "ellipse";
                                                  pos += 7;
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"ellipse\"");
                                                  }
                                                }
                                                if (result0 === null) {
                                                  if (input.substr(pos, 4) === "line") {
                                                    result0 = "line";
                                                    pos += 4;
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"line\"");
                                                    }
                                                  }
                                                  if (result0 === null) {
                                                    if (input.substr(pos, 4) === "rect") {
                                                      result0 = "rect";
                                                      pos += 4;
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"rect\"");
                                                      }
                                                    }
                                                    if (result0 === null) {
                                                      if (input.substr(pos, 3) === "use") {
                                                        result0 = "use";
                                                        pos += 3;
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"use\"");
                                                        }
                                                      }
                                                      if (result0 === null) {
                                                        if (input.substr(pos, 4) === "stop") {
                                                          result0 = "stop";
                                                          pos += 4;
                                                        } else {
                                                          result0 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"stop\"");
                                                          }
                                                        }
                                                        if (result0 === null) {
                                                          if (input.substr(pos, 8) === "polyline") {
                                                            result0 = "polyline";
                                                            pos += 8;
                                                          } else {
                                                            result0 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("\"polyline\"");
                                                            }
                                                          }
                                                          if (result0 === null) {
                                                            if (input.substr(pos, 7) === "polygon") {
                                                              result0 = "polygon";
                                                              pos += 7;
                                                            } else {
                                                              result0 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("\"polygon\"");
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_textNode() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignorable();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignorable();
        }
        if (result0 !== null) {
          result2 = parse_wordWithSlash();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_wordWithSlash();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ignorable();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ignorable();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w) {
              return {
                //@property {String} type Value 'text'
                type: 'text'
                //@property {String} value
              , value: w.join('')
              };
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_wordWithSlash() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^[^>}{<\n\t]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[^>}{<\\n\\t]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, w) {
              return w;
            })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsNode() {
        var result0;
        
        result0 = parse_handlebarsBlockNode();
        if (result0 === null) {
          result0 = parse_handlebarsSingleNode();
        }
        return result0;
      }
      
      function parse_handlebarsBlockNode() {
        var result0;
        
        result0 = parse_handlebarsIfBlock();
        if (result0 === null) {
          result0 = parse_handlebarsEachBlock();
          if (result0 === null) {
            result0 = parse_handlebarsUnlessBlock();
            if (result0 === null) {
              result0 = parse_handlebarsPartialBlock();
              if (result0 === null) {
                result0 = parse_handlebarsGenericBlock();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_handlebarsIfBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignorable();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignorable();
        }
        if (result0 !== null) {
          if (input.substr(pos, 5) === "{{#if") {
            result1 = "{{#if";
            pos += 5;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"{{#if\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result3 = parse_lookUpWords();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_space();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_space();
                }
                if (result4 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    result5 = "}}";
                    pos += 2;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_ignorable();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_ignorable();
                    }
                    if (result6 !== null) {
                      result7 = parse_nodes();
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_ignorable();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_ignorable();
                        }
                        if (result8 !== null) {
                          result9 = parse_handlebarsElseBlock();
                          result9 = result9 !== null ? result9 : "";
                          if (result9 !== null) {
                            result10 = [];
                            result11 = parse_ignorable();
                            while (result11 !== null) {
                              result10.push(result11);
                              result11 = parse_ignorable();
                            }
                            if (result10 !== null) {
                              if (input.substr(pos, 7) === "{{/if}}") {
                                result11 = "{{/if}}";
                                pos += 7;
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"{{/if}}\"");
                                }
                              }
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, condition, ifBody, elseBody) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'IF'
              , subType: 'IF'
                //@property {HandlebarsBaseConditionNodeAST} condition
              , condition: getHandlebarsBaseConditionObject(condition)
                //@property {Array<NodeASTNode>} ifBody
              , ifBody: ifBody || []
                //@property {Array<NodeASTNode>} elseBody
              , elseBody: elseBody || []
              };
            })(pos0, result0[3], result0[7], result0[9]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsEachBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignorable();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignorable();
        }
        if (result0 !== null) {
          if (input.substr(pos, 7) === "{{#each") {
            result1 = "{{#each";
            pos += 7;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"{{#each\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result3 = parse_lookUpWords();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_space();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_space();
                }
                if (result4 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    result5 = "}}";
                    pos += 2;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_ignorable();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_ignorable();
                    }
                    if (result6 !== null) {
                      result7 = parse_nodes();
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_ignorable();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_ignorable();
                        }
                        if (result8 !== null) {
                          result9 = parse_handlebarsElseBlock();
                          result9 = result9 !== null ? result9 : "";
                          if (result9 !== null) {
                            result10 = [];
                            result11 = parse_ignorable();
                            while (result11 !== null) {
                              result10.push(result11);
                              result11 = parse_ignorable();
                            }
                            if (result10 !== null) {
                              if (input.substr(pos, 9) === "{{/each}}") {
                                result11 = "{{/each}}";
                                pos += 9;
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"{{/each}}\"");
                                }
                              }
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, iterator, eachBody, elseBody) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'EACH'
              , subType: 'EACH'
                //@property {HandlebarsBaseConditionNodeAST} iterator
              , iterator: getHandlebarsBaseConditionObject(iterator)
                //@property {Array<NodeASTNode>} eachBody
              , eachBody: eachBody || []
                //@property {Array<NodeASTNode>} elseBody
              , elseBody: elseBody || []
              };
            })(pos0, result0[3], result0[7], result0[9]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsUnlessBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignorable();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignorable();
        }
        if (result0 !== null) {
          if (input.substr(pos, 9) === "{{#unless") {
            result1 = "{{#unless";
            pos += 9;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"{{#unless\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result3 = parse_lookUpWords();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_space();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_space();
                }
                if (result4 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    result5 = "}}";
                    pos += 2;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_ignorable();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_ignorable();
                    }
                    if (result6 !== null) {
                      result7 = parse_nodes();
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_ignorable();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_ignorable();
                        }
                        if (result8 !== null) {
                          result9 = parse_handlebarsElseBlock();
                          result9 = result9 !== null ? result9 : "";
                          if (result9 !== null) {
                            result10 = [];
                            result11 = parse_ignorable();
                            while (result11 !== null) {
                              result10.push(result11);
                              result11 = parse_ignorable();
                            }
                            if (result10 !== null) {
                              if (input.substr(pos, 11) === "{{/unless}}") {
                                result11 = "{{/unless}}";
                                pos += 11;
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"{{/unless}}\"");
                                }
                              }
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, condition, unlessBody, elseBody) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'UNLESS'
              , subType: 'UNLESS'
                //@property {HandlebarsBaseConditionNodeAST} condition
              , condition: getHandlebarsBaseConditionObject(condition)
                //@property {Array<NodeASTNode>} unlessBody
              , unlessBody: unlessBody || []
                //@property {Array<NodeASTNode>} elseBody
              , elseBody: elseBody || []
              };
            })(pos0, result0[3], result0[7], result0[9]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsPartialBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        result1 = parse_ignorable();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ignorable();
        }
        if (result0 !== null) {
          if (input.substr(pos, 4) === "{{#>") {
            result1 = "{{#>";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"{{#>\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result3 = parse_word();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_space();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_space();
                }
                if (result4 !== null) {
                  result5 = parse_namedParams();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_space();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_space();
                    }
                    if (result6 !== null) {
                      if (input.substr(pos, 2) === "}}") {
                        result7 = "}}";
                        pos += 2;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"}}\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_ignorable();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_ignorable();
                        }
                        if (result8 !== null) {
                          result9 = parse_nodes();
                          result9 = result9 !== null ? result9 : "";
                          if (result9 !== null) {
                            result10 = [];
                            result11 = parse_ignorable();
                            while (result11 !== null) {
                              result10.push(result11);
                              result11 = parse_ignorable();
                            }
                            if (result10 !== null) {
                              if (input.substr(pos, 3) === "{{/") {
                                result11 = "{{/";
                                pos += 3;
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"{{/\"");
                                }
                              }
                              if (result11 !== null) {
                                result12 = parse_word();
                                if (result12 !== null) {
                                  if (input.substr(pos, 2) === "}}") {
                                    result13 = "}}";
                                    pos += 2;
                                  } else {
                                    result13 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"}}\"");
                                    }
                                  }
                                  if (result13 !== null) {
                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, partialName, params, children, partialCloseName) {
              return {
                type: 'handlebars',
                subType: 'PARTIAL',
                value: partialName,
                parameters: params || [],
                children: children || []
              };
            })(pos0, result0[3], result0[5], result0[9], result0[12]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsGenericBlock() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "{{#") {
          result0 = "{{#";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_word();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result3 = parse_params();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = [];
                result5 = parse_space();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_space();
                }
                if (result4 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    result5 = "}}";
                    pos += 2;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_ignorable();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_ignorable();
                    }
                    if (result6 !== null) {
                      result7 = parse_nodes();
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_ignorable();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_ignorable();
                        }
                        if (result8 !== null) {
                          if (input.substr(pos, 3) === "{{/") {
                            result9 = "{{/";
                            pos += 3;
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"{{/\"");
                            }
                          }
                          if (result9 !== null) {
                            result10 = parse_word();
                            if (result10 !== null) {
                              if (input.substr(pos, 2) === "}}") {
                                result11 = "}}";
                                pos += 2;
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"}}\"");
                                }
                              }
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, openTagName, params, children, closeTagName) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'GENERICBLOCK'
              , subType: 'GENERICBLOCK'
                //@property {String} openTag
              , openTag: openTagName
                //@property {String} closeTag
              , closeTag: closeTagName
                //@property {Array<ParameterHandlebarsNodeASTNode>} parameters
              , parameters: params || []
                //@property {Array<NodeASTNode>} children
              , children: children || []
              };
            })(pos0, result0[1], result0[3], result0[7], result0[10]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsElseBlock() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 8) === "{{else}}") {
          result0 = "{{else}}";
          pos += 8;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{else}}\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ignorable();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ignorable();
          }
          if (result1 !== null) {
            result2 = parse_nodes();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ns) {
              return ns || [];
            })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsSingleNode() {
        var result0;
        
        result0 = parse_handlebarsSafeEvaluation();
        if (result0 === null) {
          result0 = parse_handlebarsUnSafeEvaluation();
          if (result0 === null) {
            result0 = parse_handlebarsLookup();
            if (result0 === null) {
              result0 = parse_handlebarsSingleComment();
              if (result0 === null) {
                result0 = parse_handlebarsSinglePartial();
                if (result0 === null) {
                  result0 = parse_handlebarsSafeGenericSingle();
                  if (result0 === null) {
                    result0 = parse_handlebarsUnSafeGenericSingle();
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_handlebarsSafeEvaluation() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "{{") {
          result0 = "{{";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.substr(pos, 4) === "else") {
              result2 = "else";
              pos += 4;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"else\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                result4 = parse_word();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_space();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_space();
                  }
                  if (result5 !== null) {
                    if (input.substr(pos, 2) === "}}") {
                      result6 = "}}";
                      pos += 2;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"}}\"");
                      }
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Possible values:
                // 'SAFEREFERENCEEVALUATION' in case the value starts with '@',
                // 'SAFEEVALUATION' otherwise
              , subType: w.indexOf('@') === 0 ? 'SAFEREFERENCEEVALUATION' : 'SAFEEVALUATION'
                //@property {String} value
              , value: w
              };
            })(pos0, result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsUnSafeEvaluation() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "{{{") {
          result0 = "{{{";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{{\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_word();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                if (input.substr(pos, 3) === "}}}") {
                  result4 = "}}}";
                  pos += 3;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}}}\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Possible values:
                // 'UNSAFEREFERENCEEVALUATION' in case the value starts with '@',
                // 'UNSAFEEVALUATION' otherwise
              , subType: w.indexOf('@') === 0 ? 'UNSAFEREFERENCEEVALUATION' : 'UNSAFEEVALUATION'
                //@property {String} value
              , value: w
              };
            })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsLookup() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "{{") {
          result0 = "{{";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.substr(pos, 4) === "else") {
            result1 = "else";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"else\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result3 = parse_lookUpWords();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_space();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_space();
                }
                if (result4 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    result5 = "}}";
                    pos += 2;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'LOOKUPSINGLE'
              , subType: 'LOOKUPSINGLE'
                //@property {Array<String>} value
              , value: w
              };
            })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsSingleComment() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5) === "{{!--") {
          result0 = "{{!--";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{!--\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_handlebarsSingleCommentToken();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_handlebarsSingleCommentToken();
          }
          if (result1 !== null) {
            if (input.substr(pos, 4) === "--}}") {
              result2 = "--}}";
              pos += 4;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"--}}\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, c) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'SINGLECOMMENTS'
              , subType: 'SINGLECOMMENTS'
                //@property {String} value
              , value: c.join('')
              };
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsSinglePartial() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "{{>") {
          result0 = "{{>";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{>\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_word();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                result4 = parse_namedParams();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_space();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_space();
                  }
                  if (result5 !== null) {
                    if (input.substr(pos, 2) === "}}") {
                      result6 = "}}";
                      pos += 2;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"}}\"");
                      }
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, partialName, params) {
                  return {
                      type: 'handlebars',
                      subType: 'SINGLEPARTIALS',
                      value: partialName,
                      parameters: params || []
                  };
              })(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsSingleCommentToken() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        if (input.substr(pos, 4) === "--}}") {
          result0 = "--}}";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"--}}\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          if (input.length > pos) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) {
              return t;
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsSafeGenericSingle() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "{{") {
          result0 = "{{";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.substr(pos, 3) === "!--") {
              result2 = "!--";
              pos += 3;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"!--\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = parse_word();
              if (result3 !== null) {
                result5 = parse_space();
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_space();
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result5 = parse_params();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_space();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_space();
                    }
                    if (result6 !== null) {
                      if (input.substr(pos, 2) === "}}") {
                        result7 = "}}";
                        pos += 2;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"}}\"");
                        }
                      }
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w, ps) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'GENERICSINGLE'
              , subType: 'GENERICSINGLE'
                //@property {String} value
              , value: w
                //@property {Array<ParameterHandlebarsNodeASTNode>} parameters
              , parameters: ps
              };
            })(pos0, result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsUnSafeGenericSingle() {
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "{{{") {
          result0 = "{{{";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{{\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.substr(pos, 3) === "!--") {
              result2 = "!--";
              pos += 3;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"!--\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = parse_word();
              if (result3 !== null) {
                result5 = parse_space();
                if (result5 !== null) {
                  result4 = [];
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_space();
                  }
                } else {
                  result4 = null;
                }
                if (result4 !== null) {
                  result5 = parse_params();
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_space();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_space();
                    }
                    if (result6 !== null) {
                      if (input.substr(pos, 3) === "}}}") {
                        result7 = "}}}";
                        pos += 3;
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"}}}\"");
                        }
                      }
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w, ps) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'UNSAFEGENERICSINGLE'
              , subType: 'UNSAFEGENERICSINGLE'
                //@property {String} value
              , value: w
                //@property {Array<ParameterHandlebarsNodeASTNode>} parameters
              , parameters: ps
              };
            })(pos0, result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_lookUpWords() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_word();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 47) {
            result1 = "/";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_lookUpWords();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w, ws) {
              return [w].concat(ws);
            })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_word();
          if (result0 !== null) {
            result0 = (function(offset, w) {
                return [w];
              })(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_params() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_param();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_params();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, p, ps) {
              return p.concat(ps);
            })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_param();
        }
        return result0;
      }
      
      function parse_namedParams() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_namedParam();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_namedParams();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, p, ps) {
              return p.concat(ps);
            })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_namedParam();
        }
        return result0;
      }
      
      function parse_param() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 39) {
          result0 = "'";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_paramTokenSingleQuote();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_paramTokenSingleQuote();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 39) {
              result2 = "'";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, ws) {
              return [{
                //@property {String} type Value 'parameter'
                type: 'parameter'
                //@property {String} subType Possible values:
                // 'SIMPLEVALUE' in case of a simple string parameter (in the case it appears between quotes in the template),
                // 'LOOKUPSINGLE' when the value property is an array of strings,
                // 'REFERENCEEVALUATION' in case the value property is a reference evaluation (starts with '@'),
                // 'SINGLEEVALUATION' otherwise (when the value represents a simple variable evaluation)
              , subType: 'SIMPLEVALUE'
                //@property {String|Array<String>} value
              , value: "'" + ws.join('') + "'"
              }];
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 34) {
            result0 = "\"";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_paramTokenDoubleQuote();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_paramTokenDoubleQuote();
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 34) {
                result2 = "\"";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, ws) {
                return [{
                  type: 'parameter'
                , subType: 'SIMPLEVALUE'
                , value: '"' + ws.join('') + '"'
                }];
              })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            result0 = parse_lookUpWords();
            if (result0 !== null) {
              result0 = (function(offset, l) {
                  return [getHandlebarsBaseConditionObject(l, 'parameter')];
                })(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_namedParam() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_key();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 61) {
            result1 = "=";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_param();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, key, value) {
            return [{
              type: 'handlebars',
              subType: 'NAMEDPARAMETER',
              key: key,
              value: value
            }];
          })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_paramTokenSingleQuote() {
        var result0;
        
        if (input.substr(pos, 2) === "\\'") {
          result0 = "\\'";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\'\"");
          }
        }
        if (result0 === null) {
          if (/^[^']/.test(input.charAt(pos))) {
            result0 = input.charAt(pos);
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[^']");
            }
          }
        }
        return result0;
      }
      
      function parse_paramTokenDoubleQuote() {
        var result0;
        
        if (input.substr(pos, 2) === "\\\"") {
          result0 = "\\\"";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\\\"\"");
          }
        }
        if (result0 === null) {
          if (/^[^"]/.test(input.charAt(pos))) {
            result0 = input.charAt(pos);
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[^\"]");
            }
          }
        }
        return result0;
      }
      
      function parse_attributes() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_itemList();
        if (result0 !== null) {
          result0 = (function(offset, il) {
              return isArray(il) ? il : [il];
            })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_itemList() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_attributesSimple();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ignorable();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ignorable();
          }
          if (result1 !== null) {
            result2 = parse_itemList();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, props, spaces, itemList) {
              return generateAndConcatAttributeSpaceNode(props, spaces, itemList);
            })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_attributesHandlebars();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_ignorable();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_ignorable();
            }
            if (result1 !== null) {
              result2 = parse_itemList();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, props, spaces, itemList) {
                return generateAndConcatAttributeSpaceNode(props, spaces, itemList);
              })(pos0, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            result0 = parse_attributesSimple();
            if (result0 === null) {
              result0 = parse_attributesHandlebars();
            }
          }
        }
        return result0;
      }
      
      function parse_attributesSimple() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        if (input.substr(pos, 2) === "/>") {
          result0 = "/>";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/>\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 62) {
            result1 = ">";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\">\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result2 = parse_attributeSimple();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_ignorable();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_ignorable();
              }
              if (result3 !== null) {
                result4 = parse_attributesSimple();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, prop, spaces, props) {
              return generateAndConcatAttributeSpaceNode(prop, spaces, props);
            })(pos0, result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          pos2 = pos;
          reportFailures++;
          if (input.substr(pos, 2) === "/>") {
            result0 = "/>";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"/>\"");
            }
          }
          reportFailures--;
          if (result0 === null) {
            result0 = "";
          } else {
            result0 = null;
            pos = pos2;
          }
          if (result0 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 62) {
              result1 = ">";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }
            reportFailures--;
            if (result1 === null) {
              result1 = "";
            } else {
              result1 = null;
              pos = pos2;
            }
            if (result1 !== null) {
              result2 = parse_attributeSimple();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, as) {
                return as;
              })(pos0, result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_attributeSimple() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_attributeSimpleKeyWrapper();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 61) {
            result1 = "=";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_attributeSimpleValueWrapper();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, k, v) {
              return {
                //@property {String} type Value 'keyValue'
                type: 'keyValue'
                //@property {String} key
              , key: k.value
                //@property {Array<SimpleValueHTMLAttributeASTNode>} value
              , value: v
              };
            })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_attributeSimpleKeyWrapper();
        }
        return result0;
      }
      
      function parse_attributeSimpleKeyWrapper() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_attributeSimpleKey();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 34) {
              result2 = "\"";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, pk) {
              return pk;
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 39) {
            result0 = "'";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_attributeSimpleKey();
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 39) {
                result2 = "'";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"'\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, pk) {
                return pk;
              })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            result0 = parse_attributeSimpleKey();
          }
        }
        return result0;
      }
      
      function parse_attributeSimpleKey() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[^ "'{}=>]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^ \"'{}=>]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^ "'{}=>]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^ \"'{}=>]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, keyName) {
              return {
                //@property {String} type Value 'singleKey'
                type: "singleKey"
                //@property {String} value
              , value: keyName.join('')
              };
            })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attributeSimpleValueWrapper() {
        var result0;
        
        result0 = parse_attributeSimpleValueWrapperSingleQuote();
        if (result0 === null) {
          result0 = parse_attributeSimpleValueWrapperDoubleQuote();
        }
        return result0;
      }
      
      function parse_attributeSimpleValueWrapperSingleQuote() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 39) {
          result0 = "'";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_attributeSimpleValuesSingleQuote();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 39) {
              result2 = "'";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, values) {
              return values;
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 2) === "''") {
            result0 = "''";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"''\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) {
                return [{
                  //@property {String} type Value 'singleValue'
                  type: 'singleValue'
                  //@property {String} value
                , value: ''
                }];
              })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_attributeSimpleValuesSingleQuote() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_attributeSimpleValueSingleQuote();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ignorable();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ignorable();
          }
          if (result1 !== null) {
            result2 = parse_attributeSimpleValuesSingleQuote();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v, spaces, vs) {
              return generateAndConcatAttributeSpaceNode(v, spaces, vs);
            })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_attributeSimpleValueSingleQuote();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_ignorable();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_ignorable();
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v, spaces) {
                return generateAndConcatAttributeSpaceNode(v, spaces);
              })(pos0, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_attributeSimpleValueSingleQuote() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[^ '{}]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^ '{}]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^ '{}]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^ '{}]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, valueName) {
              return {
                type: 'singleValue'
              , value: valueName.join('')
              };
            })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_attributesHandlebars();
        }
        return result0;
      }
      
      function parse_attributeSimpleValueWrapperDoubleQuote() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_attributeSimpleValuesDoubleQuote();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 34) {
              result2 = "\"";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, values) {
              return values;
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 2) === "\"\"") {
            result0 = "\"\"";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\\\"\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) {
                return [{
                  type: 'singleValue'
                , value: ''
                }];
              })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_attributeSimpleValuesDoubleQuote() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_attributeSimpleValueDoubleQuote();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ignorable();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ignorable();
          }
          if (result1 !== null) {
            result2 = parse_attributeSimpleValuesDoubleQuote();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v, spaces, vs) {
              return generateAndConcatAttributeSpaceNode(v, spaces, vs);
            })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_attributeSimpleValueDoubleQuote();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_ignorable();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_ignorable();
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, v, spaces) {
                return generateAndConcatAttributeSpaceNode(v, spaces);
              })(pos0, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_attributeSimpleValueDoubleQuote() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[^ "{}]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^ \"{}]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^ "{}]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^ \"{}]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, valueName) {
              return {
                type: 'singleValue'
              , value: valueName.join('')
              };
            })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_attributesHandlebars();
        }
        return result0;
      }
      
      function parse_attributesHandlebars() {
        var result0;
        
        result0 = parse_attributesHandlebarsBlock();
        if (result0 === null) {
          result0 = parse_attributesHandlebarsSingle();
        }
        return result0;
      }
      
      function parse_attributesHandlebarsBlock() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_attributeHandlebarsBlock();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ignorable();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ignorable();
          }
          if (result1 !== null) {
            result2 = parse_attributesHandlebarsBlock();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, h, spaces, hs) {
              return generateAndConcatAttributeSpaceNode(h, spaces, hs);
            })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_attributeHandlebarsBlock();
        }
        return result0;
      }
      
      function parse_attributeHandlebarsBlock() {
        var result0;
        
        result0 = parse_attributeHandlebarsBlockIF();
        if (result0 === null) {
          result0 = parse_attributeHandlebarsBlockEACH();
          if (result0 === null) {
            result0 = parse_attributeHandelbarsBlockUNLESS();
            if (result0 === null) {
              result0 = parse_attributeHandlebarsBlockPARTIAL();
              if (result0 === null) {
                result0 = parse_attributeHandlebarsBlockGENERIC();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_attributeHandlebarsBlockIF() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5) === "{{#if") {
          result0 = "{{#if";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{#if\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_lookUpWords();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                if (input.substr(pos, 2) === "}}") {
                  result4 = "}}";
                  pos += 2;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}}\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_ignorable();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_ignorable();
                  }
                  if (result5 !== null) {
                    result6 = parse_itemList();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_ignorable();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_ignorable();
                      }
                      if (result7 !== null) {
                        result8 = parse_handlebarsIfElseBlock();
                        result8 = result8 !== null ? result8 : "";
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_ignorable();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_ignorable();
                          }
                          if (result9 !== null) {
                            if (input.substr(pos, 7) === "{{/if}}") {
                              result10 = "{{/if}}";
                              pos += 7;
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"{{/if}}\"");
                              }
                            }
                            if (result10 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, condition, s1, ifBody, s2, elseBody, s3) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'ATTRIF'
              , subType: 'ATTRIF'
                //@property {HandlebarsBaseConditionNodeAST} condition
              , condition: getHandlebarsBaseConditionObject(condition, null, 'ATTR')
                //@property {Array<AttributeASTNode>} ifBody
              , ifBody: concatSortedSpaces(s1, ifBody || [], s2)
                //@property {Array<AttributeASTNode>} elseBody
              , elseBody: concatSortedSpaces(null, elseBody || [], s3)
              };
            })(pos0, result0[2], result0[5], result0[6], result0[7], result0[8], result0[9]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attributeHandlebarsBlockEACH() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 7) === "{{#each") {
          result0 = "{{#each";
          pos += 7;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{#each\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_lookUpWords();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                if (input.substr(pos, 2) === "}}") {
                  result4 = "}}";
                  pos += 2;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}}\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_ignorable();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_ignorable();
                  }
                  if (result5 !== null) {
                    result6 = parse_itemList();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_ignorable();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_ignorable();
                      }
                      if (result7 !== null) {
                        result8 = parse_handlebarsIfElseBlock();
                        result8 = result8 !== null ? result8 : "";
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_ignorable();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_ignorable();
                          }
                          if (result9 !== null) {
                            if (input.substr(pos, 9) === "{{/each}}") {
                              result10 = "{{/each}}";
                              pos += 9;
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"{{/each}}\"");
                              }
                            }
                            if (result10 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, iterator, s1, eachBody, s2, elseBody, s3) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'ATTREACH'
              , subType: 'ATTREACH'
                //@property {HandlebarsBaseConditionNodeAST} iterator
              , iterator: getHandlebarsBaseConditionObject(iterator, null, 'ATTR')
                //@property {Array<AttributeASTNode>} eachBody
              , eachBody: concatSortedSpaces(s1, eachBody || [], s2)
                //@property {Array<AttributeASTNode>} elseBody
              , elseBody: concatSortedSpaces(null, elseBody || [], s3)
              };
            })(pos0, result0[2], result0[5], result0[6], result0[7], result0[8], result0[9]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attributeHandelbarsBlockUNLESS() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 9) === "{{#unless") {
          result0 = "{{#unless";
          pos += 9;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{#unless\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_lookUpWords();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                if (input.substr(pos, 2) === "}}") {
                  result4 = "}}";
                  pos += 2;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}}\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_space();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_space();
                  }
                  if (result5 !== null) {
                    result6 = parse_itemList();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_space();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_space();
                      }
                      if (result7 !== null) {
                        result8 = parse_handlebarsIfElseBlock();
                        result8 = result8 !== null ? result8 : "";
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_space();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_space();
                          }
                          if (result9 !== null) {
                            if (input.substr(pos, 11) === "{{/unless}}") {
                              result10 = "{{/unless}}";
                              pos += 11;
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"{{/unless}}\"");
                              }
                            }
                            if (result10 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, condition, s1, unlessBody, s2, elseBody, s3) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'ATTRUNLESS'
              , subType: 'ATTRUNLESS'
                //@property {HandlebarsBaseConditionNodeAST} condition
              , condition: getHandlebarsBaseConditionObject(condition, null, 'ATTR')
                //@property {Array<AttributeASTNode>} unlessBody
              , unlessBody: concatSortedSpaces(s1, unlessBody || [], s2)
                //@property {Array<AttributeASTNode>} elseBody
              , elseBody: concatSortedSpaces(null, elseBody || [], s3)
              };
            })(pos0, result0[2], result0[5], result0[6], result0[7], result0[8], result0[9]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attributeHandlebarsBlockPARTIAL() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 4) === "{{#>") {
          result0 = "{{#>";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{#>\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_space();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_space();
          }
          if (result1 !== null) {
            result2 = parse_word();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                result4 = parse_namedParams();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_space();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_space();
                  }
                  if (result5 !== null) {
                    if (input.substr(pos, 2) === "}}") {
                      result6 = "}}";
                      pos += 2;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"}}\"");
                      }
                    }
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_ignorable();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_ignorable();
                      }
                      if (result7 !== null) {
                        result8 = parse_itemList();
                        result8 = result8 !== null ? result8 : "";
                        if (result8 !== null) {
                          result9 = [];
                          result10 = parse_ignorable();
                          while (result10 !== null) {
                            result9.push(result10);
                            result10 = parse_ignorable();
                          }
                          if (result9 !== null) {
                            if (input.substr(pos, 3) === "{{/") {
                              result10 = "{{/";
                              pos += 3;
                            } else {
                              result10 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"{{/\"");
                              }
                            }
                            if (result10 !== null) {
                              result11 = parse_word();
                              if (result11 !== null) {
                                if (input.substr(pos, 2) === "}}") {
                                  result12 = "}}";
                                  pos += 2;
                                } else {
                                  result12 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"}}\"");
                                  }
                                }
                                if (result12 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, partialName, params, l, closeName) {
              return {
                type: 'handlebars',
                subType: 'BLOCKPARTIAL',
                value: l || [],
                partialName: partialName,
                parameters: params || []
              };
            })(pos0, result0[2], result0[4], result0[8], result0[11]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_handlebarsIfElseBlock() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 8) === "{{else}}") {
          result0 = "{{else}}";
          pos += 8;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{else}}\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ignorable();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ignorable();
          }
          if (result1 !== null) {
            result2 = parse_itemList();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, spaces, il) {
              return concatSortedSpaces(spaces, il || []);
            })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attributeHandlebarsBlockGENERIC() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "{{#") {
          result0 = "{{#";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_word();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result3 = parse_params();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = [];
                result5 = parse_space();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_space();
                }
                if (result4 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    result5 = "}}";
                    pos += 2;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = [];
                    result7 = parse_ignorable();
                    while (result7 !== null) {
                      result6.push(result7);
                      result7 = parse_ignorable();
                    }
                    if (result6 !== null) {
                      result7 = parse_itemList();
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result8 = [];
                        result9 = parse_ignorable();
                        while (result9 !== null) {
                          result8.push(result9);
                          result9 = parse_ignorable();
                        }
                        if (result8 !== null) {
                          if (input.substr(pos, 3) === "{{/") {
                            result9 = "{{/";
                            pos += 3;
                          } else {
                            result9 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"{{/\"");
                            }
                          }
                          if (result9 !== null) {
                            result10 = parse_word();
                            if (result10 !== null) {
                              if (input.substr(pos, 2) === "}}") {
                                result11 = "}}";
                                pos += 2;
                              } else {
                                result11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"}}\"");
                                }
                              }
                              if (result11 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, openName, params, l, closeName) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'ATTRGENERICBLOCK'
              , subType: 'ATTRGENERICBLOCK'
                //@property {Array<AttributeASTNode>} value
              , value: l || []
                //@property {String} openTag
              , openTag: openName
                //@property {String} closeTag
              , closeTag: closeName
                //@property {Array<ParameterHandlebarsNodeASTNode>} parameters
              , parameters: params
              };
            })(pos0, result0[1], result0[3], result0[7], result0[10]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attributesHandlebarsSingle() {
        var result0;
        
        result0 = parse_attributeHandlebarsSingleSAFE();
        if (result0 === null) {
          result0 = parse_attributeHandlebarsSingleGENERICSAFE();
          if (result0 === null) {
            result0 = parse_attributeHandlebarsSingleUNSAFE();
            if (result0 === null) {
              result0 = parse_attributeHandlebarsSingleGENERICUNSAFE();
              if (result0 === null) {
                result0 = parse_attributeHandlebarsSingleCOMMENT();
              }
            }
          }
        }
        return result0;
      }
      
      function parse_attributeHandlebarsSingleSAFE() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "{{") {
          result0 = "{{";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.substr(pos, 4) === "else") {
            result1 = "else";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"else\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result3 = parse_lookUpWords();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_space();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_space();
                }
                if (result4 !== null) {
                  if (input.substr(pos, 2) === "}}") {
                    result5 = "}}";
                    pos += 2;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}}\"");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, value) {
              return getHandlebarsBaseConditionObject(value, null, 'ATTR');
            })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attributeHandlebarsSingleGENERICSAFE() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "{{") {
          result0 = "{{";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.substr(pos, 3) === "!--") {
            result1 = "!--";
            pos += 3;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"!--\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.substr(pos, 4) === "else") {
              result2 = "else";
              pos += 4;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"else\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                result4 = parse_word();
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_space();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_space();
                  }
                  if (result5 !== null) {
                    result6 = parse_params();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = [];
                      result8 = parse_space();
                      while (result8 !== null) {
                        result7.push(result8);
                        result8 = parse_space();
                      }
                      if (result7 !== null) {
                        if (input.substr(pos, 2) === "}}") {
                          result8 = "}}";
                          pos += 2;
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"}}\"");
                          }
                        }
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v, parameterList) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'ATTRGENERICSINGLE'
              , subType: 'ATTRGENERICSINGLE'
                //@property {String} value
              , value: v
                //@property {Array<ParameterHandlebarsNodeASTNode>} parameters
              , parameters: parameterList || []
              };
            })(pos0, result0[4], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attributeHandlebarsSingleUNSAFE() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "{{{") {
          result0 = "{{{";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{{\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.substr(pos, 4) === "else") {
            result1 = "else";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"else\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_space();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_space();
            }
            if (result2 !== null) {
              result3 = parse_lookUpWords();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_space();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_space();
                }
                if (result4 !== null) {
                  if (input.substr(pos, 3) === "}}}") {
                    result5 = "}}}";
                    pos += 3;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}}}\"");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, value) {
              return getHandlebarsBaseConditionObject(value, null, 'ATTRUNSAFE');
            })(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attributeHandlebarsSingleGENERICUNSAFE() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 3) === "{{{") {
          result0 = "{{{";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{{\"");
          }
        }
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          if (input.substr(pos, 4) === "else") {
            result1 = "else";
            pos += 4;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"else\"");
            }
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = pos2;
          }
          if (result1 !== null) {
            result2 = parse_word();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_space();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_space();
              }
              if (result3 !== null) {
                result4 = parse_params();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_space();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_space();
                  }
                  if (result5 !== null) {
                    if (input.substr(pos, 3) === "}}}") {
                      result6 = "}}}";
                      pos += 3;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"}}}\"");
                      }
                    }
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, v, parameterList) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'ATTRUNSAFEGENERICSINGLE'
              , subType: 'ATTRUNSAFEGENERICSINGLE'
                //@property {String} value
              , value: v
                //@property {Array<ParameterHandlebarsNodeASTNode>} parameters
              , parameters: parameterList || []
              };
            })(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attributeHandlebarsSingleCOMMENT() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 5) === "{{!--") {
          result0 = "{{!--";
          pos += 5;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{{!--\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_attributeHandlebarsSingleCOMMENTToken();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_attributeHandlebarsSingleCOMMENTToken();
          }
          if (result1 !== null) {
            if (input.substr(pos, 4) === "--}}") {
              result2 = "--}}";
              pos += 4;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"--}}\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, c) {
              return {
                //@property {String} type Value 'handlebars'
                type: 'handlebars'
                //@property {String} subType Value 'ATTRSINGLECOMMENTS'
              , subType: 'ATTRSINGLECOMMENTS'
                //@property {String} value
              , value: c.join('')
              };
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_attributeHandlebarsSingleCOMMENTToken() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        if (input.substr(pos, 4) === "--}}") {
          result0 = "--}}";
          pos += 4;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"--}}\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          if (input.length > pos) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) {
              return t;
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_word() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        if (input.charCodeAt(pos) === 47) {
          result0 = "/";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          if (/^[^ '"\/><{}\t]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^ '\"\\/><{}\\t]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^ '"\/><{}\t]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^ '\"\\/><{}\\t]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, w) {
              return w.join('');
            })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_key() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[A-Za-z0-9_]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Za-z0-9_]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[A-Za-z0-9_]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[A-Za-z0-9_]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, w) {
              return w.join('');
            })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_ignorable() {
        var result0;
        
        if (/^[ \n\t]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\n\\t]");
          }
        }
        return result0;
      }
      
      function parse_space() {
        var result0;
        
        if (input.charCodeAt(pos) === 32) {
          result0 = " ";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
        //@method joinAttributeSpaces Given a group of ignorable characters (spaces, enters, tabs, etc) this method clean it an returns only the valid spaces
        //@param {Array<Character>} spaces Please notice this is just an array of string, but based on how PEG works each string will be 1 character long
        //@param {String} Final string containing only spaces
        function joinAttributeSpaces (spaces)
        {
          return isArray(spaces) ? spaces.join('').replace(/\t|\n/g, '') : '';
        }
      
        //@method isArray Auxiliary method to determine is an object is or not an array
        //@param {Object} obj
        //@return {Boolean} True if the parameter passed in is an array false otherwise
        function isArray (obj)
        {
          return Object.prototype.toString.call(obj) === '[object Array]';
        }
      
        //@method generateAttributeSpaceNode Generates an artificial singleKey attribute node to represent spaces among values
        //We add the ignored space as they play an important role when setting a property's value
        //name="prop1{{V1}}" is not the same as name="prop1 {{V1}}"
        //@param {String} spaces_value String containing all the spaces to add
        //@return {ExtraSpaceSimpleKeyHTMLAttributeASTNode}
        function generateAttributeSpaceNode (space_value)
        {
          //@class ExtraSpaceSimpleKeyHTMLAttributeASTNode @extends SimpleKeyHTMLAttributeASTNode
          return {
            //@property {String} type Value 'singleKey'
            type: 'singleKey'
            //@property {String} subType Value 'extraSpaces'
          , subType: 'extraSpaces'
            //@property {String} value Variable length string of only spaces
          , value: space_value
          };
          //@class HandlebarsGrammarContext
        }
      
        //@method generateAndConcatAttributeSpaceNode Auxiliary method used to concatenate spaces in the middle of two arrays.
        //The spaces are converted into a ExtraSpaceSimpleKeyHTMLAttributeASTNode object and is appended only of the length of the string space is greater than 0
        //@param {Array<AttributeASTNode>|AttributeASTNode} accumulator_nodes
        //@param {Array<Character>} spaces Please notice this is just an array of string, but based on how PEG works each string will be 1 character long
        //@param {Array<AttributeASTNode>?|AttributeASTNode?} tail_values This value is optional
        //@return {Array<AttributeASTNode>} Result after concatenating all values
        function generateAndConcatAttributeSpaceNode (accumulator_nodes, spaces, tail_values)
        {
          var spaces_value = joinAttributeSpaces(spaces)
          , result = [];
      
          accumulator_nodes = accumulator_nodes instanceof Array ? accumulator_nodes : [accumulator_nodes];
      
          if (spaces_value.length)
          {
            var spaces_obj = generateAttributeSpaceNode(spaces_value);
      
            result = accumulator_nodes.concat(spaces_obj);
            result = !!tail_values ? result.concat(tail_values) : result;
          }
          else
          {
            result = !!tail_values ? accumulator_nodes.concat(tail_values) : accumulator_nodes;
          }
      
          return result;
        }
      
        //@method concatSortedSpaces Auxiliary method used to concatenate an array in the middle of spaces
        //@param {Array<Character>} head_spaces This value is optional
        //@param {Array<AttributeASTNode>?|AttributeASTNode?} body_nodes This value is optional
        //@param {Array<Character>} tail_spaces This value is optional
        //@return {Array<AttributeASTNode>}
        function concatSortedSpaces (head_spaces, body_nodes, tail_spaces)
        {
          var result = []
          , head_space_word = joinAttributeSpaces(head_spaces || '')
          , tail_space_word = joinAttributeSpaces(tail_spaces || '');
      
          if (head_space_word.length)
          {
            result = result.concat(generateAttributeSpaceNode(head_spaces));
          }
          if (body_nodes)
          {
            result = result.concat(body_nodes);
          }
      
          if (tail_space_word.length)
          {
            result = result.concat(generateAttributeSpaceNode(tail_space_word));
          }
      
          return result;
        }
      
        //@method getHandlebarsBaseConditionObject Auxiliary method to generate condition nodes
        //@param {Array<String>} condition
        //@param {String?} type String type to override default 'handlebars' type
        //@param {String?} prefix Optional prefix to add to the subType of the returning object
        //@return {HandlebarsBaseConditionNodeAST}
        function getHandlebarsBaseConditionObject (condition, type, prefix)
        {
          prefix = prefix || '';
          type = type || 'handlebars';
      
          //@class HandlebarsBaseConditionNodeAST
          var condition_obj = {
              //@property {String} type Value 'handlebars'
              type: type
              //@property {String} subType Possible values:
              // 'LOOKUPSINGLE' in case the condition is a look up (Array of String),
              // 'REFERENCEEVALUATION' in case the condition is a reference values (a string IN THE TEMPLATE starting with '@'),
              // 'SINGLEEVALUATION' in the the condition is a simple string denoting a simple evaluation
              // This values are used with the prefix 'ATTR' when this nodes are created in the context of an attribute
            , subType: ''
              //@property {String|Array<String>} value The condition
            , value: condition
            };
          //@class HandlebarsGrammarContext
      
          if (condition.length > 1)
          {
            condition_obj.subType = prefix + 'LOOKUPSINGLE';
            condition_obj.value = condition;
          }
          else if (condition[0].indexOf('@') === 0)
          {
            condition_obj.subType = prefix + 'REFERENCEEVALUATION';
            condition_obj.value = condition[0];
          }
          else
          {
            condition_obj.subType = prefix + 'SINGLEEVALUATION';
            condition_obj.value = condition[0];
          }
      
          return condition_obj;
        }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
